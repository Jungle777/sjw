import csv
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout
from keras.optimizers import SGD
import numpy as np
data=[]
for i in range(600):
    path='E:\picture\ISIC2018_Task3_Training_Input\ISIC_00'+str(i+24306)+'.jpg'
    img = load_img(path,target_size=(224, 224))
    img = img_to_array(img)
    data.append(img)
data = np.array(data)
data = preprocess_input(data)
x_train = data[:500]
x_test = data[500:]

data_=[]
with open('E:\picture\ISIC2018_Task3_Training_GroundTruth.csv','r') as csvfile:
    csv_reader = csv.reader(csvfile)
    type = next(csv_reader)
    for i in range(600):
        data_.append(next(csv_reader))
type = np.array(type)
type = type[1:]
data_ = np.array(data_)
data_ = data_[:,1:]
data_ =data_.astype(float)
y_train = data_[:500,:]
y_test = data_[500:,:]


model.load_weights('C:\Users\95192\.keras\models\vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5')
model = Sequential()
model.add(Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))
 
model.add(Conv2D(128, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(Conv2D(128, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))
 
model.add(Conv2D(256, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(Conv2D(256, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))
 
model.add(Conv2D(512, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(Conv2D(512, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))
 
model.add(Conv2D(512, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(Conv2D(512, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))
 
model.add(Flatten())
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7,activation='softmax'))

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])

model.fit(x_train,y_train,epochs=100,validation_split=0.1,batch_size=5)
y_pred =model.predict(x_test)
print(y_pred)